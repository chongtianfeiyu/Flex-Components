<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	minWidth="350" 
	minHeight="75"
	width="350"
	height="88" 
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	styleName="toolbarStyle"
	showCloseButton="true"
	close=" closeHandler(event)"
	creationComplete="init();"
	tabEnabled="false"
	>
<!--
 Auothor: 罗楷
 Email: kevin.luo.sl@gmail.com
-->
	<mx:Metadata>		
		/**
		 *  Name of the CSS Style declaration to use for the styles for the TextArea.
		 *  By default, the TextArea uses the RichTextEditor control's inheritable styles.
		 */
		[Style(name="textAreaStyleName", type="String", inherit="no")]
		
		[IconFile("RichTextEditor.png")]
		
		[Exclude(name="alignButtons", kind="property")]
		[Exclude(name="boldButton", kind="property")]
		[Exclude(name="bulletButton", kind="property")]
		[Exclude(name="colorPicker", kind="property")]
		[Exclude(name="defaultButton", kind="property")]
		[Exclude(name="fontFamilyArray", kind="property")]
		[Exclude(name="fontFamilyCombo", kind="property")]
		[Exclude(name="fontSizeArray", kind="property")]
		[Exclude(name="fontSizeCombo", kind="property")]
		[Exclude(name="icon", kind="property")]
		[Exclude(name="italicButton", kind="property")]
		[Exclude(name="label", kind="property")]
		[Exclude(name="layout", kind="property")]
		[Exclude(name="linkTextInput", kind="property")]
		[Exclude(name="toolBar", kind="property")]
		[Exclude(name="toolBar2", kind="property")]
		[Exclude(name="underlineButton", kind="property")]

	</mx:Metadata>
	
	<mx:Array id="fontFamilyArray"> 
		<mx:String>_sans</mx:String>
		<mx:String>_serif</mx:String>
		<mx:String>_typewriter</mx:String>
		<mx:String>Arial</mx:String>
		<mx:String>Courier</mx:String>
		<mx:String>Courier New</mx:String>
		<mx:String>Geneva</mx:String>
		<mx:String>Georgia</mx:String>
		<mx:String>Helvetica</mx:String>
		<mx:String>Times New Roman</mx:String>
		<mx:String>Times</mx:String>
		<mx:String>Verdana</mx:String>
	</mx:Array>

	<mx:Array id="fontSizeArray"> 
		<mx:String>8</mx:String>
		<mx:String>9</mx:String>
		<mx:String>10</mx:String>
		<mx:String>11</mx:String>
		<mx:String>12</mx:String>
		<mx:String>14</mx:String>
		<mx:String>16</mx:String>
		<mx:String>18</mx:String>
		<mx:String>20</mx:String>
		<mx:String>22</mx:String>
		<mx:String>24</mx:String>
		<mx:String>26</mx:String>
		<mx:String>28</mx:String>
		<mx:String>36</mx:String>
		<mx:String>48</mx:String>
		<mx:String>72</mx:String>
	</mx:Array>
	<mx:Script>
		<![CDATA[
			import mx.managers.FocusManager;
			import mx.skins.halo.SwatchPanelSkin;
			import mx.managers.SystemManager;
			import mx.controls.List;
			import mx.events.CloseEvent;
			import mx.events.FlexMouseEvent;
			import mx.events.FlexEvent;
			import mx.core.UIComponent;
			import mx.core.Application;
			import mx.core.Container;
			import mx.managers.PopUpManager;
			import mx.controls.TextArea;
			import mx.controls.textClasses.TextRange;
			import mx.core.mx_internal;
		    import mx.core.UITextField;
		    import mx.controls.colorPickerClasses.SwatchPanel;
		    use namespace mx_internal;
						
			public var fontFamilyToolTip:String = "Font Family";
			public var fontSizeToolTip:String = "Font Size";
			public var boldToolTip:String = "Bold";
			public var italicToolTip:String = "Italic";
			public var underlineToolTip:String = "Underline";
			public var colorPickerToolTip:String = "Color";
			public var alignOrBulletToolTip:String = "Align or Bullet";
			/* public var bulletToolTip:String = "Bullet"; */
			public var linkToolTip:String = "Link";
		
			private var linkTextCommitted:Boolean = false;
			private var showControlBarChanged:Boolean = false;
			private var showToolTipsChanged:Boolean = false;
			private var textChanged:Boolean = false;
			private var htmlTextChanged:Boolean = false;
			private var previousTextFormat:TextFormat = null;
			private var textFormatChanged:Boolean = false;
			
					    
			private var textArea:TextArea;
			private var positionAdjusted:Boolean = false;
			
			public function set target(value:TextArea):void
			{
				if(value!=null)
				{
					textArea = value;
					invalidateDisplayList();	
					addTextAreaEventListener();						
				}
			}
			
			private function adjustPosition():void
			{

				if(!stage || positionAdjusted)
					return;
				
				var textField:TextField = textArea.getTextField() as TextField;
				
				//get the selection top left point 	
				var selectionTopLeft:Point = getSelectionTopLeftPoint(textField);
				
				// init the destination point which toolbar will move to.
				var destinationPoint:Point = textArea.contentToGlobal(selectionTopLeft);
				
				// set the toolbar below the position where to insert the next character.
				var verticalOffset:Number = 30;
				
				// set the toolbar after the position where to insert the next character.
				var horizontalOffset:Number = 30;
				
				
				// adjust the x coordinate of destinationPoint.
				
				// if the toolbar can be displayed in the textarea.
				if(textArea.width >= this.unscaledWidth)
				{
					// based on the selectionTopLeftPoint to calculate the coordinate of the toolbar.
					destinationPoint.x += horizontalOffset; 
					destinationPoint.y += verticalOffset; 
				}
				// place the tool bar outside text area
				else
				{
					// destinationpoint.y is used to place toolbar at correct y position.
					destinationPoint = new Point(textField.x,textArea.globalToContent(destinationPoint).y);
					destinationPoint = textArea.contentToGlobal(destinationPoint);
					destinationPoint.x = destinationPoint.x + textArea.width;					
				}
				
				// reset the position if boolbar is outside the stage.
				if(stage.width < this.unscaledWidth + destinationPoint.x)
				{
					destinationPoint.x = destinationPoint.x - (destinationPoint.x + this.unscaledWidth -stage.width) - textArea.width;
					// there is a pane of toolbar still overlap text area, so must move it outside text area.
					destinationPoint.x -= 28;
					//destinationPoint.y += verticalOffset;
				}
				
				// adjust the y coordinate of destinationPoint.
				if(stage.height < this.unscaledHeight + destinationPoint.y)
				{
					destinationPoint.y = destinationPoint.y - (destinationPoint.y + this.unscaledHeight -stage.height);
				}
			
				this.move(destinationPoint.x,destinationPoint.y);
				positionAdjusted = true;
								
			}
			
			private function getSelectionTopLeftPoint(textField:TextField):Point
			{
				var selectionIndex:int = textField.caretIndex == 0 ?0:textField.caretIndex-1;
				
				var rectangle:Rectangle = textField.getCharBoundaries(selectionIndex);		
				var topLeft:Point;
								
				var reFetchRect:Boolean = false;
				
				//while the first char of a row is empty, fetch the rectangle of the previous char.
				if(!rectangle && selectionIndex!=0)
				{					
					rectangle = textField.getCharBoundaries(selectionIndex-1);	
					reFetchRect = true;
				}	
									
				if(rectangle)
				{					
					topLeft = new Point(rectangle.x,rectangle.y);
					if(reFetchRect)
					{
						topLeft.y += rectangle.height;
					}
				}
				else
				{					
					topLeft = new Point(0,0);
				}
				return topLeft;
			}
			
			public function get target():TextArea
			{
				return textArea;
			}
			
			// -1 is used to force updation of the ToolBar styles
			// edison: i changed this to 0 to avoid the mistaken updation of toolbar styles.
			private var lastCaretIndex:int = 0;
			private var invalidateToolBarFlag:Boolean = false;
			/*
			public function RichTextEditor()
			{
				super();
			}
			*/
			
		    //--------------------------------------------------------------------------
		    //
		    //  Properties
		    //
		    //--------------------------------------------------------------------------
		
		    //----------------------------------
		    //  defaultLinkProtocol
		    //----------------------------------
		
			private var _defaultLinkProtocol:String = "http://";
		
			[Inspectable(defaultValue="http://")]
			
			public function get defaultLinkProtocol():String
			{
				return _defaultLinkProtocol;
			}
		
			public function set defaultLinkProtocol(value:String):void
			{
				_defaultLinkProtocol = value;
				
				if (linkTextInput)
					linkTextInput.text = _defaultLinkProtocol;
			}
		
		    //----------------------------------
		    //  showControlBar
		    //----------------------------------
		
			private var _showControlBar:Boolean = true;
		
			[Inspectable(category="General", defaultValue="true")]
			
			public function get showControlBar():Boolean
			{
				return _showControlBar;
			}
		
			public function set showControlBar(value:Boolean):void
			{
				_showControlBar = value;
				showControlBarChanged = true;
				invalidateProperties();
			}
		
		    //----------------------------------
		    //  showToolTips
		    //----------------------------------
		
			private var _showToolTips:Boolean = false;
		
			[Inspectable(defaultValue="false")]
			
			public function get showToolTips():Boolean
			{
				return _showToolTips;
			}
		
			public function set showToolTips(value:Boolean):void
			{
				_showToolTips = value;
				showToolTipsChanged = true;
				invalidateProperties();
			}
		
		    //----------------------------------
		    //  selection
		    //----------------------------------
		
			/**
		     *  The selected text.
		     */
			public function get selection():TextRange
			{
				return new TextRange(this, true);
			}
		
		    //----------------------------------
		    //  text
		    //----------------------------------
		
			private var _text:String = "";
		
			[Bindable("valueCommit")]
			[CollapseWhiteSpace]
			[NonCommittingChangeEvent("change")]
			[Inspectable(category="General")]
		
			public function get text():String
			{
				return textArea ? textArea.text : _text;
			}
		
			public function set text(value:String):void
			{
				_text = value;
				textChanged = true;
				invalidateProperties();
			}
		
		    //----------------------------------
		    //  htmlText
		    //----------------------------------
		
			private var _htmlText:String = "";
		
			[Bindable("valueCommit")]
			[CollapseWhiteSpace]
			[NonCommittingChangeEvent("change")]
			[Inspectable(category="General")]
		
			public function get htmlText():String
			{
				return textArea ? textArea.htmlText : _htmlText;
			}
		
			public function set htmlText(value:String):void
			{
				_htmlText = value;
				htmlTextChanged = true;
				invalidateProperties();
			}
			
			private function init():void
			{		
				//stage.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownOutsideHandler);
			}
			
		    //--------------------------------------------------------------------------
		    //
		    //  Overridden methods
		    //
		    //--------------------------------------------------------------------------
		
			override protected function createChildren():void
			{
				super.createChildren();
				
				if(!textArea)
					return;
					
				var textAreaStyleName:String = getStyle(
									"textAreaStyleName");
				if (textAreaStyleName)
					textArea.styleName = textAreaStyleName;
				textArea.getTextField().alwaysShowSelection = true;
			}
		
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if(!textArea)
					return;
					
				if (showControlBarChanged)
				{
					if (_showControlBar)
					{
						controlBar.height = NaN;
						controlBar.visible = true;
					}
					else
					{
						controlBar.height = 0;
						controlBar.visible = false;
					}
					showControlBarChanged = false;
				}
							
				if (showToolTipsChanged)
				{
					if (_showToolTips)
					{
						fontFamilyCombo.toolTip = fontFamilyToolTip;
						fontSizeCombo.toolTip = fontSizeToolTip;
						boldButton.toolTip = boldToolTip;
						italicButton.toolTip = italicToolTip;
						underlineButton.toolTip = underlineToolTip;
						colorPicker.toolTip = colorPickerToolTip;
						alignOrBulletButtons.toolTip = alignOrBulletToolTip;
						/* bulletButton.toolTip = bulletToolTip; */
						linkTextInput.toolTip = linkToolTip;
					}
					else
					{
						fontFamilyCombo.toolTip = "";
						fontSizeCombo.toolTip = "";
						boldButton.toolTip = "";
						italicButton.toolTip = "";
						underlineButton.toolTip = "";
						colorPicker.toolTip = "";
						alignOrBulletButtons.toolTip = "";
						/* bulletButton.toolTip = ""; */
						linkTextInput.toolTip = "";
					}	
					showToolTipsChanged = false;
				}
				
				if (textChanged || htmlTextChanged)
				{
					// Revert previously set TextFormat.
					var tf:TextFormat = mx.core.UITextField(textArea.getTextField()).getTextStyles();
					// bullet style is not exposed in flex
					// hence has to be explicitly defaulted.
					tf.bullet = false;
					textArea.getTextField().defaultTextFormat = tf;
					if (textChanged)
					{
						if (_text !== null)
							textArea.text = _text;
						textChanged = false;
					}
					else
					{
						if (_htmlText !== null)
							textArea.htmlText = _htmlText;
						htmlTextChanged = false;
					}
				}
			}
			
			override protected function measure():void
			{
				// Called only when explicitWidth and
				// explicitHeight are set to NaN, since
				// we have set width and height explicitly
				// for RTE's panel.
				super.measure();
				measuredMinWidth = 220;
				measuredWidth = 320;
				measuredMinHeight = 200;
				measuredHeight = 300;
			}
		
			/**
			 *  @private
			 */
			override public function styleChanged(styleProp:String):void
			{
				super.styleChanged(styleProp);
				
				// filter the call from FocusManager.this may cause the toolbar make 
				// mistakes.such as reset the toolbar styles.
				
				if(styleProp == "mouseShield" || styleProp == "mouseShieldChildren")
						return;
						
				if(!textArea)
					return;
				
				if (styleProp == null || styleProp == "textAreaStyleName")
				{
					if (textArea)
					{
						var textAreaStyleName:String = getStyle("textAreaStyleName");
						textArea.styleName = textAreaStyleName;
					}
				}
				
				if (!invalidateToolBarFlag)
				{
					invalidateToolBarFlag = true;						
					callLater(getTextStyles);
				}
			}
		
		    //--------------------------------------------------------------------------
		    //
		    //  Methods
		    //
		    //--------------------------------------------------------------------------
		
			private function setTextStyles(type:String, value:Object = null):void
			{
				if(!textArea)
					return;
					
				var tf:TextFormat;
		
				var beginIndex:int = textArea.getTextField().selectionBeginIndex;
				var endIndex:int = textArea.getTextField().selectionEndIndex;
		
				if (beginIndex == endIndex)
				{
					tf = previousTextFormat;
				}
				else	
					tf = new TextFormat();
				
				if (type == "bold" || type == "italic" || type == "underline")
				{
					tf[type] = value;
				}
				else if (type == "align" || type == "bullet")
				{
					if (beginIndex == endIndex)
					{
						tf = new TextFormat();
					}
		
					// Apply the paragraph styles to the whole paragraph instead of just 
					// the selected text
					beginIndex = textArea.getTextField().getFirstCharInParagraph(beginIndex) - 1;
					beginIndex = Math.max(0, beginIndex);
					endIndex = textArea.getTextField().getFirstCharInParagraph(endIndex) +
						textArea.getTextField().getParagraphLength(endIndex) - 1;
											
					tf[type] = value;
					previousTextFormat[type] = value;
					
					if (!endIndex)
						textArea.getTextField().defaultTextFormat = tf;
				}
				else if (type == "font")
				{
					tf[type] = fontFamilyCombo.text;
				}
				else if (type == "size")
				{
					var fontSize:uint = uint(fontSizeCombo.text);
					if (fontSize > 0)
						tf[type] = fontSize;
				}
				else if (type == "color")
				{
					tf[type] = uint(colorPicker.selectedColor);
				}
				else if (type == "url")
				{
					if (value != defaultLinkProtocol && value != "")
					{
						tf[type] = value;
						tf["target"] = "_blank";
					}
					else if (tf[type] != "")
					{
						tf[type] = ""; 
						tf["target"] = ""; 
					}
				}
		
				textFormatChanged = true;
						
				if (beginIndex == endIndex)
				{
					previousTextFormat = tf;
				}
				else
				{
					textArea.getTextField().setTextFormat(tf,beginIndex,endIndex);
				}
		
				textArea.dispatchEvent(new Event("change"));
				
				var caretIndex:int = textArea.getTextField().caretIndex;
				var lineIndex:int =	textArea.getTextField().getLineIndexOfChar(caretIndex);
		
				textArea.invalidateDisplayList();
				textArea.validateDisplayList();
		
				// Scroll to make the line containing the caret under viewable area
				while (lineIndex >= textArea.getTextField().bottomScrollV)
				{
					textArea.verticalScrollPosition++;
				}
		
				callLater(textArea.setFocus);
			}
		
			private function getTextStyles():void
			{
				if(!textArea)
					return;
					
				var tf:TextFormat;
		
				var beginIndex:int = textArea.getTextField().selectionBeginIndex;
				var endIndex:int = textArea.getTextField().selectionEndIndex;
		
				if (beginIndex == endIndex)
					linkTextInput.enabled = false;
				else
					linkTextInput.enabled = true;	
					
				if (textFormatChanged)
					previousTextFormat = null;
		
				if (beginIndex == endIndex)
				{
					tf = textArea.getTextField().defaultTextFormat;
					if (tf.url != "")
					{
						var carIndex:int = textArea.getTextField().caretIndex;
						if (carIndex < textArea.getTextField().length)
						{
							var tfNext:TextFormat=textArea.getTextField().getTextFormat(carIndex, carIndex + 1);
							if (!tfNext.url || tfNext.url == "")
								tf.url = tf.target = "";
						}
						else
							tf.url = tf.target = ""; 
					}
				}
				else
					tf = textArea.getTextField().getTextFormat(beginIndex,endIndex);
		
				if (!previousTextFormat || previousTextFormat.font != tf.font)
					setComboSelection(fontFamilyCombo, tf.font ? tf.font : "");
				if (!previousTextFormat || previousTextFormat.size != tf.size)
					setComboSelection(fontSizeCombo, tf.size ? String(tf.size) : "");
				if (!previousTextFormat || previousTextFormat.color != tf.color)
					colorPicker.selectedColor = Number(tf.color);
				
				if (!previousTextFormat || previousTextFormat.bold != tf.bold)
					boldButton.selected = tf.bold;
				if (!previousTextFormat || previousTextFormat.italic != tf.italic)
					italicButton.selected = tf.italic;
				if (!previousTextFormat || previousTextFormat.underline != tf.underline)
					underlineButton.selected = tf.underline;
		
				if (!previousTextFormat || previousTextFormat.align != tf.align || previousTextFormat.bullet != tf.bullet)
				{
					if (tf.bullet == true)
						alignOrBulletButtons.selectedIndex = 4;
					else if (tf.align == "left")
						alignOrBulletButtons.selectedIndex = 0;
					else if (tf.align == "center")
						alignOrBulletButtons.selectedIndex = 1;
					else if (tf.align == "right")
						alignOrBulletButtons.selectedIndex = 2;
					else if (tf.align == "justify")
						alignOrBulletButtons.selectedIndex = 3;					
				}
					
				if (!previousTextFormat || previousTextFormat.url != tf.url)
					linkTextInput.text = (tf.url == "" || tf.url == null) ? defaultLinkProtocol : tf.url;
				
				if (textArea.getTextField().defaultTextFormat != tf)
					textArea.getTextField().defaultTextFormat = tf;
				previousTextFormat = tf;
				textFormatChanged = false;
				
				lastCaretIndex = textArea.getTextField().caretIndex;
				invalidateToolBarFlag = false;
			}
			private function textAreaKeyUpHandler(event:KeyboardEvent):void
			{
				getTextStyles();
			}
			private function textAreaKeyDownHandler(event:KeyboardEvent):void
			{
				if (textFormatChanged) 
			 	{
			 		textArea.getTextField().defaultTextFormat=previousTextFormat;
			 		textFormatChanged = false;
			 	}
			}
			
			private function mouseDownHandler(event:MouseEvent):void
			{								
				systemManager.addEventListener(
					MouseEvent.MOUSE_UP, systemManager_mouseUpHandler, true);
			}
			private function setComboSelection(combo:ComboBox,val:String):void
			{
				var length:uint = combo.dataProvider.length;
				
				for (var i:uint = 0; i < length; i++)
				{
					if (combo.dataProvider.getItemAt(i).toLowerCase() == val.toLowerCase())
					{
						combo.selectedIndex = i;
						return;
					}
				}
				combo.selectedIndex = -1;
				combo.validateNow();
				combo.text = val;
			}
		
			/**
			 *  @private
			 *  This method is called when the user clicks on the textArea, drags
			 *  out of it and releases the mouse button outside the TextArea.
			 */
			private function systemManager_mouseUpHandler(event:MouseEvent):void
			{
				if (lastCaretIndex != textArea.getTextField().caretIndex)
					getTextStyles();
				else
				{
					if (textArea.getTextField().selectionBeginIndex == textArea.getTextField().selectionEndIndex)
						linkTextInput.enabled = false;
					else
						linkTextInput.enabled = true;	
				}
				systemManager.removeEventListener(
					MouseEvent.MOUSE_UP, systemManager_mouseUpHandler, true);	
			}
			
			private function closeHandler(event:CloseEvent):void
			{
				removeTextAreaEventListener();			
			}
			
			private function addTextAreaEventListener():void
			{
				if(!textArea)
				{
					return;
				}
				textArea.addEventListener(KeyboardEvent.KEY_UP,textAreaKeyUpHandler);
				textArea.addEventListener(KeyboardEvent.KEY_DOWN,textAreaKeyDownHandler);
				textArea.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);	
				textArea.addEventListener(FocusEvent.FOCUS_OUT,textAreaFocusOutHandler);	
			
			}
			
			private function textAreaFocusOutHandler(event:FocusEvent):void
			{
				tryRemoveToolbar(event.relatedObject);
			}
			
			public function tryRemoveToolbar(interactiveObject:*,localPoint:Point = null):void
			{
				var isOutSide:Boolean = true;
				if(interactiveObject)
				{
					isOutSide = checkOutside(interactiveObject.parent,localPoint);
				} 	
				if(isOutSide)			
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			private function checkOutside(container:Object,localPoint:Point = null):Boolean
			{
				if(localPoint)
				{
					var globalPoint:Point = this.localToGlobal(localPoint);
					var textAreaGlobalPoint:Point = textArea.localToGlobal(localPoint);
					
					return !(this.hitTestPoint(globalPoint.x,globalPoint.y) || 
						textArea.hitTestPoint(textAreaGlobalPoint.x,textAreaGlobalPoint.y));
				}
				else
				{
					var parent:Object = container;
					while(parent && !(parent is SystemManager) && !(parent is Stage))
					{
						if(parent == this 
							|| parent == this.textArea 
							|| parent == this.colorPicker.dropdown 
							|| parent == this.fontFamilyCombo
							|| parent == this.fontSizeCombo)
						{
							return false;						
						}
						if(parent.hasOwnProperty("owner") && parent.owner)
						{
							parent = parent.owner;
						}
						else if(parent.hasOwnProperty("parent") && parent.parent)
						{
							parent = parent.parent;
						}					
						else
						{
							parent = null;
						}
					}
				}
				return true;
			}
			
			private function removeTextAreaEventListener():void
			{
				if(!textArea)
				{
					return;
				}

				textArea.removeEventListener(KeyboardEvent.KEY_UP,textAreaKeyUpHandler);
				textArea.removeEventListener(KeyboardEvent.KEY_DOWN,textAreaKeyDownHandler);
				textArea.removeEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);	
				textArea.removeEventListener(FocusEvent.FOCUS_OUT,textAreaFocusOutHandler);		
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				if(textArea)
				{
					adjustPosition();
				}
			}
			
			private function linkTextInputChangeHandler(event:Event):void
			{
				var tf:TextFormat = new TextFormat();
				
				if(linkTextInput.text == "http://" || linkTextInput.text.length==0)
				{
					//if the link is http:// or blank, delete the underline:
					tf.underline = false;
					textArea.getTextField().setTextFormat(tf,textArea.selectionBeginIndex,textArea.selectionEndIndex);
				}		
				else
				{
					//add underline:
					tf.underline = true;
					textArea.getTextField().setTextFormat(tf,textArea.selectionBeginIndex,textArea.selectionEndIndex);
				}				
			}
			
			private function doAlignOrBullet(event:Event):void
			{
				var action:String = ToggleButtonBar(event.currentTarget).dataProvider.getItemAt(ToggleButtonBar(event.currentTarget).selectedIndex).action;
				if(action == "bullet")
				{
					setTextStyles('align', "left");
					setTextStyles('bullet', true);
				}
				else
				{
					setTextStyles('bullet', false);
					setTextStyles('align', action);
				} 
			}
			
		]]>
	</mx:Script>
	<!--<mx:ControlBar id="controlBar" width="100%">-->
		<mx:ControlBar>
			<mx:ToolBar id="toolbar" width="100%">
			
			<mx:ComboBox id="fontFamilyCombo" editable="true"
				creationComplete="getTextStyles();"
				dataProvider = "{fontFamilyArray}"
				close="setTextStyles('font');"
				enter="setTextStyles('font');"/>

			<mx:ComboBox id="fontSizeCombo" width="50" editable="true"
				paddingLeft="2"
				dataProvider = "{fontSizeArray}"
				close="setTextStyles('size');"
				enter="setTextStyles('size');"/>
					 
			<mx:HBox id="toolBar2" horizontalGap="0">

				<mx:Button id="boldButton" width="20" toggle="true"
						   icon="@Embed('assets/icon_style_bold.png')"
						   click="setTextStyles('bold', event.currentTarget.selected);" /> 
				
				<mx:Button id="italicButton" width="20" toggle="true"
						   icon="@Embed('assets/icon_style_italic.png')"
						   click="setTextStyles('italic', event.currentTarget.selected);" /> 
				
				<mx:Button id="underlineButton" width="20" toggle="true"
						   icon="@Embed('assets/icon_style_underline.png')"
						   click="setTextStyles('underline', event.currentTarget.selected);" /> 

			</mx:HBox>
		
			<mx:ColorPicker id="colorPicker" width="22" height="22"
						close="setTextStyles('color');"/>

			<mx:VRule height="{alignOrBulletButtons.height}"/>

			<mx:ToggleButtonBar id="alignOrBulletButtons" buttonWidth="20"
							itemClick="doAlignOrBullet(event);" >
				<mx:dataProvider>
					<mx:Array> 
						<mx:Object icon="@Embed('assets/icon_align_left.png')" action="left"/>
						<mx:Object icon="@Embed('assets/icon_align_center.png')" action="center"/>
						<mx:Object icon="@Embed('assets/icon_align_right.png')" action="right"/>
						<mx:Object icon="@Embed('assets/icon_align_justify.png')" action="justify"/>
						<mx:Object icon="@Embed('assets/icon_bullet.png')" action="bullet"/>
					</mx:Array>
				</mx:dataProvider>
			</mx:ToggleButton
			Bar>

			<mx:VRule height="{linkTextInput.height}"/>

			<mx:TextInput id="linkTextInput" width="140"
				change="linkTextInputChangeHandler(event);"
				focusOut="if (linkTextCommitted) 
						  { trace('already committed'); linkTextCommitted = false;} 
						  else 
						  { trace('not committed'); setTextStyles('url', linkTextInput.text); linkTextInput.text=defaultLinkProtocol;}"
				enter="setTextStyles('url', linkTextInput.text); linkTextInput.text=defaultLinkProtocol; linkTextCommitted=true;"/>

		</mx:ToolBar>				
	</mx:ControlBar>
</mx:TitleWindow>
